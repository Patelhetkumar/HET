import yaml
import re
import os
import subprocess
import sys
from collections import deque

def unify_name(full_name):
    """
    1) Lowercase
    2) Remove all spaces
    3) Strip domain at first '.'
    4) Remove trailing digits after efs, efsd, efsp, etc.
    """
    # Remove all spaces
    full_name = re.sub(r"\s+", "", full_name.lower())
    # Remove domain after first dot
    short = full_name.split('.', 1)[0]
    # Remove trailing digits after efs/d/p
    short = re.sub(r'(efs[dp]?|pefs|cefs)(\d+)$', r'\1', short)
    return short

def normalize_cell(cell_name):
    """Lowercase, remove spaces, remove domain spacing, etc."""
    c = re.sub(r"\s+", "", cell_name.lower())
    c = c.replace(".m1.com", ".ml.com")
    return c

def get_efs_data():
    """Parse efs display efsserver into { short_name -> set_of_cells } with debug."""
    cmd = """efs display efsserver | sed -e '1,/^==*/d' | awk '{print $2 ", " $1 ", " $3 ", " $4}'"""
    result = subprocess.run(cmd, shell=True, capture_output=True, text=True, check=True)

    efs_data = {}
    for line in result.stdout.strip().split("\n"):
        parts = [p.strip() for p in line.split(",")]
        if len(parts) < 4:
            continue
        raw_srv, raw_cell, _, _ = parts
        short = unify_name(raw_srv)
        cell = normalize_cell(raw_cell)
        efs_data.setdefault(short, set()).add(cell)

    print(f"[DEBUG] EFS server count: {len(efs_data)}")
    return efs_data

def bfs_load_inventory(inventory_file):
    """BFS over entire doc, printing node keys for debug."""
    if not os.path.isfile(inventory_file):
        print(f"[DEBUG] file not found: {inventory_file}")
        sys.exit(1)

    with open(inventory_file, "r") as f:
        doc = yaml.safe_load(f)

    inv_data = {}
    queue = deque([doc])

    while queue:
        node = queue.popleft()
        if isinstance(node, dict):
            # Debug: print the top-level keys in this dictionary
            node_keys = list(node.keys())
            print(f"[DEBUG] BFS node keys: {node_keys}")

            # If node has hosts
            if "hosts" in node and isinstance(node["hosts"], dict):
                print("[DEBUG] Found a 'hosts' block, parsing servers ...")
                for raw_srv, details in node["hosts"].items():
                    if isinstance(details, dict):
                        short = unify_name(raw_srv)
                        cell_list = details.get("cells", [])
                        norm_cells = {normalize_cell(c) for c in cell_list}
                        inv_data[short] = norm_cells

            # Enqueue sub-dicts or dicts in lists
            for val in node.values():
                if isinstance(val, dict):
                    queue.append(val)
                elif isinstance(val, list):
                    for item in val:
                        if isinstance(item, dict):
                            queue.append(item)
        elif isinstance(node, list):
            for item in node:
                if isinstance(item, dict):
                    queue.append(item)

    print(f"[DEBUG] Inventory data servers found: {len(inv_data)}")
    return inv_data

def compare(efs_data, inv_data):
    efs_srvs = set(efs_data.keys())
    inv_srvs = set(inv_data.keys())

    missing_in_inv = sorted(efs_srvs - inv_srvs)
    missing_in_efs = sorted(inv_srvs - efs_srvs)

    if missing_in_inv:
        print("\nServers found in EFS Database but not in ax_inventories:")
        for s in missing_in_inv:
            print(s)

    if missing_in_efs:
        print("\nServers found in ax_inventories but not in Efs Database or efsserver.txt:")
        for s in missing_in_efs:
            print(s)

    common = efs_srvs & inv_srvs
    for srv in sorted(common):
        efs_cells = efs_data[srv]
        inv_cells = inv_data[srv]
        if efs_cells != inv_cells:
            missing_cells = efs_cells - inv_cells
            extra_cells   = inv_cells - efs_cells
            print(f"\nMismatch for server: {srv}")
            print(f" Efs Database: {efs_cells}")
            print(f" Ax inventory: {inv_cells}")
            if missing_cells:
                print(f" Cells in the Efs Database but not in the Ax inventory: {missing_cells}")
            if extra_cells:
                print(f" Cells in the Ax inventory but not in the Efs Database: {extra_cells}")

def main():
    script_dir = os.path.dirname(os.path.abspath(__file__))
    inv_file = os.path.join(script_dir, "..", "prod", "inventory.prod.yaml")

    print("[DEBUG] Loading EFS data ...")
    efs_data = get_efs_data()

    print("[DEBUG] BFS scanning entire YAML ...")
    inv_data = bfs_load_inventory(inv_file)

    print("[DEBUG] Starting final comparison ...")
    compare(efs_data, inv_data)

if __name__ == "__main__":
    main()
