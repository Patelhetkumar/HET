import yaml
import re
import os
import sys
import subprocess
from collections import deque

###############################################################################
# 1) CELL NORMALIZATION HELPERS
###############################################################################

def remove_spaces_around_dots(cell: str) -> str:
    """
    Removes weird spaces around dots, turning:
      "p.usny0l.nyc. amrs.ml.com" -> "p.usny0l.nyc.amrs.ml.com"
    Then remove leftover multiple spaces if any remain.
    """
    # remove spaces around dots
    cell = re.sub(r"\s*\.\s*", ".", cell)
    # remove leftover multiple spaces
    cell = re.sub(r"\s+", "", cell)
    return cell

def normalize_cell(cell_name: str) -> str:
    """
    1) Trim + Lowercase
    2) Replace ".m1.com" -> ".ml.com"
    3) Remove weird spaces around dots
    """
    c = cell_name.strip().lower()
    c = c.replace(".m1.com", ".ml.com")
    c = remove_spaces_around_dots(c)
    return c

###############################################################################
# 2) EFS Data Parsing (Server, Cell, Dev/Prod, Group)
###############################################################################

def get_efs_server_output():
    """
    Runs 'efs display efsserver' -> lines in format:
      server_name, cell, dev/prod, group
    We'll store them exactly, e.g.:
      efs_data = { "luspa01efsd850.sdi.corp.bankofamerica.com" -> set_of_normalized_cells }
    """
    cmd = """efs display efsserver | sed -e '1,/^==*/d' | awk '{print $2 ", " $1 ", " $3 ", " $4}'"""
    result = subprocess.run(cmd, shell=True, capture_output=True, text=True, check=True)

    efs_data = {}
    for line in result.stdout.strip().split("\n"):
        parts = [p.strip() for p in line.split(",")]
        if len(parts) < 4:
            continue
        server_name = parts[0]  # e.g. luspa01efsd850.sdi.corp.bankofamerica.com
        raw_cell    = parts[1]

        # normalize the cell
        cell_val = normalize_cell(raw_cell)

        if server_name not in efs_data:
            efs_data[server_name] = set()
        efs_data[server_name].add(cell_val)

    return efs_data

###############################################################################
# 3) BFS Inventory (Exact Server Names)
###############################################################################

def load_inventory_anywhere(inventory_file: str):
    """
    BFS-scan entire inventory.prod.yaml for 'hosts:' blocks, storing
    { server_name -> set_of_normalized_cells } exactly as EFS uses them.
    """
    if not os.path.isfile(inventory_file):
        print(f"‚ùå Error: Inventory file '{inventory_file}' not found.")
        sys.exit(1)

    with open(inventory_file, "r") as f:
        doc = yaml.safe_load(f)

    inv_data = {}
    queue = deque([doc])

    while queue:
        node = queue.popleft()
        if isinstance(node, dict):
            # If node has 'hosts'
            if "hosts" in node and isinstance(node["hosts"], dict):
                for srv_name, details in node["hosts"].items():
                    if isinstance(details, dict):
                        # parse cell list
                        cell_list = details.get("cells", [])
                        norm_cells = {normalize_cell(c) for c in cell_list}
                        inv_data[srv_name] = norm_cells

            # BFS deeper
            for val in node.values():
                if isinstance(val, dict):
                    queue.append(val)
                elif isinstance(val, list):
                    for item in val:
                        if isinstance(item, dict):
                            queue.append(item)
        elif isinstance(node, list):
            for item in node:
                if isinstance(item, dict):
                    queue.append(item)

    return inv_data

###############################################################################
# 4) Compare & Print Mismatches (Your Style)
###############################################################################

def compare_data(efs_data, inv_data):
    """
    EXACT headings from your screenshot style:
      - "Servers found in EFS Database but not in ax_inventories:"
      - "Servers found in ax_inventories but not in Efs Database or efsserver.txt:"
      - Mismatch lines with Efs Database vs Ax inventory sets
    """
    efs_servers = set(efs_data.keys())
    inv_servers = set(inv_data.keys())

    missing_in_inventory = efs_servers - inv_servers
    missing_in_efs       = inv_servers - efs_servers

    if missing_in_inventory:
        print("\nServers found in EFS Database but not in ax_inventories:")
        print("==========================================================")
        for srv in sorted(missing_in_inventory):
            print(srv)

    if missing_in_efs:
        print("\nServers found in ax_inventories but not in Efs Database or efsserver.txt:")
        print("==========================================================")
        for srv in sorted(missing_in_efs):
            print(srv)

    # For servers in both
    common = efs_servers & inv_servers
    for srv in sorted(common):
        efs_cells = efs_data[srv]
        inv_cells = inv_data[srv]

        if efs_cells != inv_cells:
            missing_cells = efs_cells - inv_cells
            extra_cells   = inv_cells - efs_cells

            print(f"\nMismatch for server: {srv}")
            print(f" Efs Database: {efs_cells}")
            print(f" Ax inventory: {inv_cells}")

            if missing_cells:
                print(f" Cells in the Efs Database but not in the Ax inventory: {missing_cells}")
            if extra_cells:
                print(f" Cells in the Ax inventory but not in the Efs Database: {extra_cells}")

###############################################################################
# 5) Main Orchestrator
###############################################################################

def validate_inventory_with_efs(inventory_file):
    efs_data = get_efs_server_output()
    inv_data = load_inventory_anywhere(inventory_file)
    compare_data(efs_data, inv_data)

def main():
    script_dir = os.path.dirname(os.path.abspath(__file__))
    inv_file = os.path.join(script_dir, "..", "prod", "inventory.prod.yaml")
    validate_inventory_with_efs(inv_file)

if __name__ == "__main__":
    main()
