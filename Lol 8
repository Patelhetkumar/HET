import yaml
import re
import os
import subprocess
import sys
from collections import deque

###############################################################################
# 1) Parse EFS Data (No “unify_name”)
###############################################################################

def get_efs_server_output():
    """
    Runs 'efs display efsserver' which yields lines in the format:
      server_name, domain/cell, dev/prod, group
    We'll store them in a dictionary:
      efs_data = { full_server_name -> set_of_cells }
    """
    cmd = """efs display efsserver | sed -e '1,/^==*/d' | awk '{print $2 ", " $1 ", " $3 ", " $4}'"""
    result = subprocess.run(cmd, shell=True, capture_output=True, text=True, check=True)

    efs_data = {}
    for line in result.stdout.strip().split("\n"):
        parts = [p.strip() for p in line.split(",")]
        if len(parts) < 4:
            continue
        # parts = [server_name, cell_name, dev_or_prod, group]
        server_name = parts[0]       # e.g. luspa01efsd850.sdi.corp.bankofamerica.com
        cell_name   = parts[1]       # e.g. d.usny01.nyc.amrs.ml.com
        # We won’t store dev_or_prod/group here, but you could if you wish.

        if server_name not in efs_data:
            efs_data[server_name] = set()
        efs_data[server_name].add(cell_name)

    return efs_data

###############################################################################
# 2) BFS Inventory Parsing (Exact Name)
###############################################################################

def load_inventory(inventory_file):
    """
    BFS over the entire YAML doc, collecting any 'hosts:' blocks keyed by
    the *exact* server name, e.g. 'luspa01efsd850.sdi.corp.bankofamerica.com'.
    
    Returns: inv_data = { full_server_name -> set_of_cells }
    """
    if not os.path.isfile(inventory_file):
        print(f"❌ Error: Inventory file '{inventory_file}' not found.")
        sys.exit(1)

    with open(inventory_file, 'r') as f:
        doc = yaml.safe_load(f)

    inv_data = {}
    queue = deque([doc])

    while queue:
        node = queue.popleft()
        if isinstance(node, dict):
            # If node has 'hosts'
            if "hosts" in node and isinstance(node["hosts"], dict):
                for srv_name, details in node["hosts"].items():
                    if isinstance(details, dict):
                        # If the inventory has cells
                        cell_list = details.get("cells", [])
                        inv_data[srv_name] = set(cell_list)

            # BFS deeper for sub-dicts
            for val in node.values():
                if isinstance(val, dict):
                    queue.append(val)
                elif isinstance(val, list):
                    for item in val:
                        if isinstance(item, dict):
                            queue.append(item)

        elif isinstance(node, list):
            for item in node:
                if isinstance(item, dict):
                    queue.append(item)

    return inv_data

###############################################################################
# 3) Compare & Print Mismatches (Simple)
###############################################################################

def compare_data(efs_data, inv_data):
    """
    Compare efs_data vs. inv_data by exact server name. 
    Both are { full_server_name -> set_of_cells }.
    """
    efs_servers = set(efs_data.keys())
    inv_servers = set(inv_data.keys())

    missing_in_inventory = efs_servers - inv_servers
    missing_in_efs       = inv_servers - efs_servers

    # 1) EFS minus Inventory
    if missing_in_inventory:
        print("\nServers found in EFS Database but not in ax_inventories:")
        print("==========================================================")
        for srv in sorted(missing_in_inventory):
            print(srv)

    # 2) Inventory minus EFS
    if missing_in_efs:
        print("\nServers found in ax_inventories but not in Efs Database or efsserver.txt:")
        print("==========================================================")
        for srv in sorted(missing_in_efs):
            print(srv)

    # 3) For servers in both
    common = efs_servers & inv_servers
    for srv in sorted(common):
        efs_cells = efs_data[srv]
        inv_cells = inv_data[srv]
        if efs_cells != inv_cells:
            missing_cells = efs_cells - inv_cells
            extra_cells   = inv_cells - efs_cells
            print(f"\nMismatch for server: {srv}")
            print(f" Efs Database: {efs_cells}")
            print(f" Ax inventory: {inv_cells}")
            if missing_cells:
                print(f" Cells in the Efs Database but not in the Ax inventory: {missing_cells}")
            if extra_cells:
                print(f" Cells in the Ax inventory but not in the Efs Database: {extra_cells}")

###############################################################################
# 4) Main Orchestrator
###############################################################################

def validate_inventory_with_efs(inventory_file):
    efs_data = get_efs_server_output()
    inv_data = load_inventory(inventory_file)
    compare_data(efs_data, inv_data)

def main():
    script_dir = os.path.dirname(os.path.abspath(__file__))
    inventory_file = os.path.join(script_dir, "..", "prod", "inventory.prod.yaml")
    validate_inventory_with_efs(inventory_file)

if __name__ == "__main__":
    main()
