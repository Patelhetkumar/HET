import yaml
import re
import os
import subprocess
import sys
from collections import deque

def unify_name(full_name):
    short = full_name.split('.', 1)[0].lower()
    short = re.sub(r'(efs[dp]?|pefs|cefs)(\d+)$', r'\1', short)
    return short

def normalize_cell(c):
    c = c.strip().lower()
    c = c.replace(".m1.com", ".ml.com")
    return c

def get_efs_server_output():
    cmd = """efs display efsserver | sed -e '1,/^==*/d' | awk '{print $2 ", " $1 ", " $3 ", " $4}'"""
    result = subprocess.run(cmd, shell=True, capture_output=True, text=True, check=True)
    efs_data = {}
    for line in result.stdout.strip().split("\n"):
        parts = [p.strip() for p in line.split(",")]
        if len(parts) < 4: 
            continue
        raw_srv, raw_cell, _, _ = parts
        srv = unify_name(raw_srv)
        cell = normalize_cell(raw_cell)
        efs_data.setdefault(srv, set()).add(cell)
    print(f"[DEBUG] EFS data servers count: {len(efs_data)}")
    return efs_data

def load_inventory_anywhere(inventory_file):
    if not os.path.isfile(inventory_file):
        print(f"❌  Error: Inventory file '{inventory_file}' not found.")
        sys.exit(1)

    with open(inventory_file, 'r') as f:
        doc = yaml.safe_load(f)

    inventory_data = {}
    from collections import deque
    queue = deque([doc])  # BFS over entire YAML

    while queue:
        node = queue.popleft()
        if isinstance(node, dict):
            # If there's a 'hosts' key, parse it
            if "hosts" in node and isinstance(node["hosts"], dict):
                print("[DEBUG] Found 'hosts' block somewhere in YAML.")
                for raw_srv, details in node["hosts"].items():
                    if isinstance(details, dict):
                        s = unify_name(raw_srv)
                        cell_list = details.get("cells", [])
                        norm_cells = {normalize_cell(c) for c in cell_list}
                        inventory_data[s] = norm_cells
            # Enqueue sub-dicts
            for v in node.values():
                if isinstance(v, dict):
                    queue.append(v)
                elif isinstance(v, list):
                    for item in v:
                        if isinstance(item, dict):
                            queue.append(item)

    print(f"[DEBUG] Inventory data servers count: {len(inventory_data)}")
    return inventory_data

def compare_cells(efs_data, inv_data):
    print("[DEBUG] Starting comparison ...")
    efs_srvs = set(efs_data.keys())
    inv_srvs = set(inv_data.keys())

    missing_in_inventory = efs_srvs - inv_srvs
    missing_in_efs       = inv_srvs - efs_srvs

    if missing_in_inventory:
        print("\nServers found in EFS Database but not in ax_inventories:")
        print("==========================================================")
        for s in sorted(missing_in_inventory):
            print(s)

    if missing_in_efs:
        print("\nServers found in ax_inventories but not in Efs Database or efsserver.txt:")
        print("==========================================================")
        for s in sorted(missing_in_efs):
            print(s)

    common = efs_srvs & inv_srvs
    for srv in sorted(common):
        efs_cells = efs_data[srv]
        inv_cells = inv_data[srv]
        if efs_cells != inv_cells:
            missing_cells = efs_cells - inv_cells
            extra_cells   = inv_cells - efs_cells
            print(f"\nMismatch for server: {srv}")
            print(f" Efs Database: {efs_cells}")
            print(f" Ax inventory: {inv_cells}")
            if missing_cells:
                print(f" Cells in the Efs Database but not in the Ax inventory: {missing_cells}")
            if extra_cells:
                print(f" Cells in the Ax inventory but not in the Efs Database: {extra_cells}")

def main():
    script_dir = os.path.dirname(os.path.abspath(__file__))
    inventory_file = os.path.join(script_dir, '..', 'prod', 'inventory.prod.yaml')

    print("[DEBUG] Loading EFS data from command ...")
    efs_data = get_efs_server_output()

    print("[DEBUG] BFS scanning entire YAML for 'hosts' keys ...")
    inv_data = load_inventory_anywhere(inventory_file)

    print("[DEBUG] Starting comparison ...")
    compare_cells(efs_data, inv_data)

if __name__ == "__main__":
    main()
