import yaml
import re
import os
import subprocess
import sys

#################################
# 1) Name Normalization
#################################

def unify_name(full_name):
    """
    Strips the domain (first dot), lowercases,
    removes trailing digits after efs/efsd/efsp/pefs/cefs if needed.
    """
    short = full_name.split('.', 1)[0].lower()
    # Example pattern for removing trailing digits:
    #   lauaulcefsp899 -> lauaulcefsp
    short = re.sub(r'(efs[dp]?|pefs|cefs)(\d+)$', r'\1', short)
    return short

def normalize_cell(cell_name):
    """
    Lowercase, strip whitespace, replace .m1.com -> .ml.com
    """
    cell_name = cell_name.strip().lower()
    cell_name = cell_name.replace(".m1.com", ".ml.com")
    return cell_name

#################################
# 2) EFS Data Extraction
#################################

def get_efs_server_output():
    cmd = """efs display efsserver | sed -e '1,/^==*/d' | awk '{print $2 ", " $1 ", " $3 ", " $4}'"""
    result = subprocess.run(cmd, shell=True, capture_output=True, text=True, check=True)

    efs_data = {}
    for line in result.stdout.strip().split("\n"):
        parts = [p.strip() for p in line.split(",")]
        if len(parts) < 4:
            continue

        raw_srv, raw_cell, dev_prod, efs_group = parts
        srv  = unify_name(raw_srv)
        cell = normalize_cell(raw_cell)

        if srv not in efs_data:
            efs_data[srv] = set()
        efs_data[srv].add(cell)

    return efs_data

#################################
# 3) Inventory Parsing (with Debug)
#################################

def load_inventory(inventory_file):
    """
    Recursively parse inventory, storing {unified_srv -> set_of_cells}.
    Prints debug info so you can see if it processes the correct groups & hosts.
    """
    if not os.path.isfile(inventory_file):
        print(f"❌  Error: inventory file '{inventory_file}' not found.")
        sys.exit(1)

    with open(inventory_file, 'r') as f:
        doc = yaml.safe_load(f)

    inventory_data = {}

    def recurse_groups(node, path="all->children"):
        if not isinstance(node, dict):
            return

        hosts = node.get("hosts", {})
        if isinstance(hosts, dict):
            print(f"\n[DEBUG] Processing 'hosts' under path: {path}")
            for raw_server, details in hosts.items():
                print(f"  [DEBUG] Found server: {raw_server}")
                if isinstance(details, dict):
                    server_name = unify_name(raw_server)
                    cell_list   = details.get("cells", [])
                    norm_cells  = {normalize_cell(c) for c in cell_list}
                    # Debug printing
                    print(f"    [DEBUG] Unified => {server_name}, cells => {norm_cells}")
                    inventory_data[server_name] = norm_cells

        children = node.get("children", {})
        if isinstance(children, dict):
            for child_key, child_val in children.items():
                # Debug printing
                print(f"\n[DEBUG] Descending into child group: {child_key}")
                recurse_groups(child_val, path=f"{path}->{child_key}")

    base = doc.get("all", {}).get("children", {})
    recurse_groups(base)
    return inventory_data

#################################
# 4) Compare in Your Format
#################################

def compare_cells(efs_data, inventory_data):
    """
    EXACT headings & output style:
      - "Servers found in EFS Database but not in ax_inventories:"
      - "Servers found in ax_inventories but not in Efs Database or efsserver.txt:"
      - Then mismatch blocks
    """
    efs_servers = set(efs_data.keys())
    inv_servers = set(inventory_data.keys())

    missing_in_inventory = sorted(efs_servers - inv_servers)
    extra_in_efs = sorted(inv_servers - efs_servers)

    if missing_in_inventory:
        print("\nServers found in EFS Database but not in ax_inventories:")
        print("==========================================================")
        for s in missing_in_inventory:
            print(s)

    if extra_in_efs:
        print("\nServers found in ax_inventories but not in Efs Database or efsserver.txt:")
        print("==========================================================")
        for s in extra_in_efs:
            print(s)

    # Common
    common = efs_servers & inv_servers
    for srv in sorted(common):
        efs_cells = efs_data[srv]
        inv_cells = inventory_data[srv]
        if efs_cells != inv_cells:
            missing_cells = efs_cells - inv_cells
            extra_cells   = inv_cells - efs_cells

            print(f"\nMismatch for server: {srv}")
            print(f" Efs Database: {efs_cells}")
            print(f" Ax inventory: {inv_cells}")

            if missing_cells:
                print(f" Cells in the Efs Database but not in the Ax inventory: {missing_cells}")
            if extra_cells:
                print(f" Cells in the Ax inventory but not in the Efs Database: {extra_cells}")

#################################
# 5) Orchestrator
#################################

def validate_inventory_with_efs(inventory_file):
    """
    1) Parse EFS data
    2) Parse inventory (printing debug)
    3) Compare results
    """
    print("[DEBUG] Loading EFS data from command ...")
    efs_data = get_efs_server_output()
    print(f"[DEBUG] EFS data servers count: {len(efs_data)}")

    print("\n[DEBUG] Loading inventory YAML ...")
    inv_data = load_inventory(inventory_file)
    print(f"[DEBUG] Inventory data servers count: {len(inv_data)}")

    print("\n[DEBUG] Starting comparison ...")
    compare_cells(efs_data, inv_data)
    print("\n✅ Comparison complete.")

def main():
    script_dir = os.path.dirname(os.path.abspath(__file__))
    inventory_file = os.path.join(script_dir, '..', 'prod', 'inventory.prod.yaml')
    validate_inventory_with_efs(inventory_file)

if __name__ == "__main__":
    main()
