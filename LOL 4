import yaml
import re
import os
import subprocess
import sys
import json

def unify_name(full_name):
    """
    1) Strip domain at first '.' 
    2) Lowercase
    3) Remove trailing digits after efs(d/p), pefs, cefs
    """
    short = full_name.split('.', 1)[0].lower()
    short = re.sub(r'(efs[dp]?|pefs|cefs)(\d+)$', r'\1', short)
    return short

def normalize_cell(cell_name):
    """Lowercase, remove .m1.com -> .ml.com, strip spaces."""
    cell_name = cell_name.strip().lower()
    cell_name = cell_name.replace(".m1.com", ".ml.com")
    return cell_name

def get_efs_server_output():
    print("[DEBUG] Loading EFS data from command ...")
    cmd = """efs display efsserver | sed -e '1,/^==*/d' | awk '{print $2 ", " $1 ", " $3 ", " $4}'"""
    result = subprocess.run(cmd, shell=True, capture_output=True, text=True, check=True)

    efs_data = {}
    for line in result.stdout.strip().split("\n"):
        parts = [p.strip() for p in line.split(",")]
        if len(parts) < 4:
            continue
        raw_srv, raw_cell, _, _ = parts
        srv = unify_name(raw_srv)
        cell = normalize_cell(raw_cell)
        if srv not in efs_data:
            efs_data[srv] = set()
        efs_data[srv].add(cell)

    print(f"[DEBUG] EFS data servers count: {len(efs_data)}")
    return efs_data

def load_inventory(inventory_file):
    """
    Recursively parse the YAML, printing debug info 
    so you can see exactly which 'hosts' are processed.
    """
    print("[DEBUG] Loading inventory YAML ...")

    if not os.path.isfile(inventory_file):
        print(f"❌  Error: inventory file '{inventory_file}' not found.")
        sys.exit(1)

    with open(inventory_file, 'r') as f:
        doc = yaml.safe_load(f)

    # Print the entire doc for debug if you want:
    # print("[DEBUG] Full doc:")
    # print(json.dumps(doc, indent=4))

    inventory_data = {}

    def recurse_groups(node, path_desc):
        if not isinstance(node, dict):
            return

        # If node has 'hosts'
        if "hosts" in node and isinstance(node["hosts"], dict):
            print(f"[DEBUG] Found 'hosts' under path: {path_desc}")
            for raw_srv, details in node["hosts"].items():
                if not isinstance(details, dict):
                    continue
                unified_srv = unify_name(raw_srv)
                cell_list   = details.get("cells", [])
                norm_cells  = {normalize_cell(c) for c in cell_list}
                inventory_data[unified_srv] = norm_cells

        # If node has 'children'
        children = node.get("children", {})
        if isinstance(children, dict):
            for child_key, child_val in children.items():
                child_path = f"{path_desc}->{child_key}"
                recurse_groups(child_val, child_path)

    base_children = doc.get("all", {}).get("children", {})
    print("[DEBUG] Processing 'hosts' under path: all->children")
    recurse_groups(base_children, path_desc="all->children")

    print(f"[DEBUG] Inventory data servers count: {len(inventory_data)}")
    return inventory_data

def compare_cells(efs_data, inventory_data):
    print("[DEBUG] Starting comparison ...")
    efs_servers = set(efs_data.keys())
    inv_servers = set(inventory_data.keys())

    missing_in_inventory = sorted(efs_servers - inv_servers)
    missing_in_efs       = sorted(inv_servers - efs_servers)

    if missing_in_inventory:
        print("\nServers found in EFS Database but not in ax_inventories:")
        print("==========================================================")
        for srv in missing_in_inventory:
            print(srv)

    if missing_in_efs:
        print("\nServers found in ax_inventories but not in Efs Database or efsserver.txt:")
        print("==========================================================")
        for srv in missing_in_efs:
            print(srv)

    common = efs_servers & inv_servers
    for srv in sorted(common):
        efs_cells = efs_data[srv]
        inv_cells = inventory_data[srv]
        if efs_cells != inv_cells:
            missing_cells = efs_cells - inv_cells
            extra_cells   = inv_cells - efs_cells

            print(f"\nMismatch for server: {srv}")
            print(f" Efs Database: {efs_cells}")
            print(f" Ax inventory: {inv_cells}")

            if missing_cells:
                print(f" Cells in the Efs Database but not in the Ax inventory: {missing_cells}")
            if extra_cells:
                print(f" Cells in the Ax inventory but not in the Efs Database: {extra_cells}")

def validate_inventory_with_efs(inventory_file):
    efs_data = get_efs_server_output()
    inv_data = load_inventory(inventory_file)
    compare_cells(efs_data, inv_data)

def main():
    script_dir = os.path.dirname(os.path.abspath(__file__))
    inventory_file = os.path.join(script_dir, '..', 'prod', 'inventory.prod.yaml')
    validate_inventory_with_efs(inventory_file)

if __name__ == "__main__":
    main()
