import subprocess
import yaml
import re
import os

# Load AX Inventory file
script_dir = os.path.dirname(os.path.abspath(__file__))
inventory_file = os.path.join(script_dir, '..', 'prod', 'inventory.prod.yaml')

def get_efs_server_output():
    """Extracts server details from 'efs display efsserver' command dynamically."""
    cmd = "efs display efsserver | awk 'NR>3 {print $2 \" \" $1 \" \" $3 \" \" $4}'"
    result = subprocess.run(cmd, shell=True, capture_output=True, text=True, check=True)

    servers = {}
    for line in result.stdout.strip().split("\n"):
        parts = line.strip().split()
        if len(parts) >= 4:  # Ensure at least: server_name, domain, type, group
            server_name = parts[0]  # E.g., laau42efs899
            domain = parts[1]       # E.g., apac.sdi.corp.bankofamerica.com
            host_type = parts[2]    # E.g., dev/prod
            group = parts[3]        # E.g., l_aja_ausyb01sr1
            
            servers[server_name] = {
                "domain": domain,
                "type": host_type,
                "group": group
            }

    return servers

def load_ax_inventory():
    """Loads predefined group mappings from AX inventory."""
    with open(inventory_file, 'r') as file:
        inventory = yaml.safe_load(file)

    ax_mappings = {}

    # Extract group assignments from AX Inventory
    all_groups = inventory.get('all', {}).get('children', {})
    for group, group_data in all_groups.items():
        if "hosts" in group_data and isinstance(group_data["hosts"], dict):
            for server, details in group_data["hosts"].items():
                ax_mappings[server] = {
                    "group": group,
                    "cells": set(details.get("cells", []))
                }

    return ax_mappings

def compare_efs_with_ax_inventory():
    """Compares dynamically extracted EFS data against AX Inventory."""
    efs_data = get_efs_server_output()
    ax_inventory = load_ax_inventory()

    print("\n==== DEBUG: Comparing EFS Data with AX Inventory ====")

    mismatches = []
    missing_servers = list(set(efs_data.keys()) - set(ax_inventory.keys()))
    extra_servers = list(set(ax_inventory.keys()) - set(efs_data.keys()))

    if missing_servers:
        print("\nMissing servers in AX Inventory:")
        print("==========================================================")
        for server in missing_servers:
            print(f" {server}")

    if extra_servers:
        print("\nServers found in AX Inventory but not in EFS Database:")
        print("==========================================================")
        for server in extra_servers:
            print(f" {server}")

    for server, efs_details in efs_data.items():
        ax_details = ax_inventory.get(server, {})
        expected_group = ax_details.get("group", "UNKNOWN_GROUP")
        actual_group = efs_details["group"]

        expected_cells = ax_details.get("cells", set())
        actual_cells = {efs_details["domain"]}  # Convert domain to set

        print(f"\nChecking Server: {server}")  # Debugging
        print(f" - Expected Group (from AX Inventory): {expected_group}")
        print(f" - Actual Group (from EFS Database): {actual_group}")
        print(f" - Expected Cells: {expected_cells}")
        print(f" - Actual Cells: {actual_cells}")

        if expected_group != actual_group:
            mismatches.append(f"Mismatch: {server} -> Expected: {expected_group}, Found: {actual_group}")

        if expected_cells != actual_cells:
            missing_cells = expected_cells - actual_cells
            extra_cells = actual_cells - expected_cells

            mismatches.append(f"{server} has cell mismatches:")
            if missing_cells:
                mismatches.append(f" Cells in AX Inventory but missing in EFS: {missing_cells}")
            if extra_cells:
                mismatches.append(f" Cells in EFS but missing in AX Inventory: {extra_cells}")

    if mismatches:
        print("\n==== Mismatch Found ====")
        for mismatch in mismatches:
            print(mismatch)
    else:
        print("\nâœ… All servers are correctly assigned in AX Inventory!")

# Run Validation
compare_efs_with_ax_inventory()
