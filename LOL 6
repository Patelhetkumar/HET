import yaml
import re
import os
import subprocess
import sys
from collections import deque

################################################################################
# 1) Helpers to Remove ALL Non-Essential Spaces/Characters
################################################################################

def strip_nonessential_chars(s):
    """
    Removes ANY whitespace and certain extraneous punctuation, leaving only:
      - letters (a-z, A-Z)
      - digits (0-9)
      - dots (.)
      - underscores (_)
      - hyphens (-)
    Everything else is nuked. This helps if hidden or weird whitespace is present.
    Example:
      "p. usva02. ric. amrs.ml.com" -> "p.usva02.ric.amrs.ml.com"
    """
    # Lowercase first
    s = s.lower()
    # Remove all non [a-z0-9._-] characters
    s = re.sub(r'[^a-z0-9._-]+', '', s)
    return s

def unify_name(full_name):
    """
    1) Nuke all extraneous whitespace/punctuation except [a-z0-9._-].
    2) Strip everything after first '.' to remove domain portion.
    3) Remove trailing digits after efs|efsd|efsp|pefs|cefs.
    """
    full_name = strip_nonessential_chars(full_name)
    # separate at first dot
    parts = full_name.split('.', 1)
    short = parts[0] if parts else full_name

    # remove trailing digits after efs/efsd/efsp/pefs/cefs
    short = re.sub(r'(efs[dp]?|pefs|cefs)(\d+)$', r'\1', short)
    return short

def normalize_cell(cell_name):
    """
    1) Nuke extraneous chars except [a-z0-9._-].
    2) Convert .m1.com -> .ml.com
    """
    cell_name = strip_nonessential_chars(cell_name)
    cell_name = cell_name.replace(".m1.com", ".ml.com")
    return cell_name

################################################################################
# 2) EFS Data (Storing Short -> {cells}, also a map for Original Name)
################################################################################

def get_efs_server_output():
    cmd = """efs display efsserver | sed -e '1,/^==*/d' | awk '{print $2 ", " $1 ", " $3 ", " $4}'"""
    result = subprocess.run(cmd, shell=True, capture_output=True, text=True, check=True)

    efs_data = {}
    efs_raw_map = {}
    for line in result.stdout.strip().split("\n"):
        parts = [p.strip() for p in line.split(",")]
        if len(parts) < 4: 
            continue
        raw_server_name, raw_cell, _, _ = parts

        short_name = unify_name(raw_server_name)
        if short_name not in efs_raw_map:
            # Just store raw server name "as is" (or we could store the nuked version)
            efs_raw_map[short_name] = raw_server_name

        cell_val = normalize_cell(raw_cell)
        if short_name not in efs_data:
            efs_data[short_name] = set()
        efs_data[short_name].add(cell_val)

    return efs_data, efs_raw_map

################################################################################
# 3) BFS Inventory (Storing Short -> {cells}, also Original Name Map)
################################################################################

def load_inventory_anywhere(inventory_file):
    if not os.path.isfile(inventory_file):
        print(f"‚ùå Error: file not found: {inventory_file}")
        sys.exit(1)

    with open(inventory_file, 'r') as f:
        doc = yaml.safe_load(f)

    inv_data = {}
    inv_raw_map = {}

    queue = deque([doc])
    while queue:
        node = queue.popleft()
        if isinstance(node, dict):
            hosts = node.get("hosts", {})
            if isinstance(hosts, dict):
                for raw_srv, details in hosts.items():
                    if isinstance(details, dict):
                        short_srv = unify_name(raw_srv)
                        if short_srv not in inv_raw_map:
                            inv_raw_map[short_srv] = raw_srv
                        cell_list = details.get("cells", [])
                        norm_cells = {normalize_cell(c) for c in cell_list}
                        inv_data[short_srv] = norm_cells

            for v in node.values():
                if isinstance(v, dict):
                    queue.append(v)
                elif isinstance(v, list):
                    for item in v:
                        if isinstance(item, dict):
                            queue.append(item)
        elif isinstance(node, list):
            for item in node:
                if isinstance(item, dict):
                    queue.append(item)

    return inv_data, inv_raw_map

################################################################################
# 4) Compare & Print
################################################################################

def compare_cells(efs_data, efs_raw_map, inv_data, inv_raw_map):
    efs_srvs = set(efs_data.keys())
    inv_srvs = set(inv_data.keys())

    missing_in_inventory = sorted(efs_srvs - inv_srvs)
    missing_in_efs       = sorted(inv_srvs - efs_srvs)

    if missing_in_inventory:
        print("\nServers found in EFS Database but not in ax_inventories:")
        print("==========================================================")
        for short_srv in missing_in_inventory:
            raw_name = efs_raw_map.get(short_srv, short_srv)
            print(raw_name)

    if missing_in_efs:
        print("\nServers found in ax_inventories but not in Efs Database or efsserver.txt:")
        print("==========================================================")
        for short_srv in missing_in_efs:
            raw_name = inv_raw_map.get(short_srv, short_srv)
            print(raw_name)

    common = efs_srvs & inv_srvs
    for short_srv in sorted(common):
        efs_cells = efs_data[short_srv]
        inv_cells = inv_data[short_srv]

        if efs_cells != inv_cells:
            # Choose which raw name to show in mismatch
            # Prefer EFS raw name if available, else fallback to Inventory raw
            raw_efs = efs_raw_map.get(short_srv)
            raw_inv = inv_raw_map.get(short_srv)
            if raw_efs:
                display_name = raw_efs
            elif raw_inv:
                display_name = raw_inv
            else:
                display_name = short_srv

            missing_cells = efs_cells - inv_cells
            extra_cells   = inv_cells - efs_cells

            print(f"\nMismatch for server: {display_name}")
            print(f" Efs Database: {efs_cells}")
            print(f" Ax inventory: {inv_cells}")

            if missing_cells:
                print(f" Cells in the Efs Database but not in the Ax inventory: {missing_cells}")
            if extra_cells:
                print(f" Cells in the Ax inventory but not in the Efs Database: {extra_cells}")

################################################################################
# 5) Orchestrator
################################################################################

def validate_inventory_with_efs(inventory_file):
    efs_data, efs_raw_map = get_efs_server_output()
    inv_data, inv_raw_map = load_inventory_anywhere(inventory_file)
    compare_cells(efs_data, efs_raw_map, inv_data, inv_raw_map)

def main():
    script_dir = os.path.dirname(os.path.abspath(__file__))
    inventory_file = os.path.join(script_dir, '..', 'prod', 'inventory.prod.yaml')
    validate_inventory_with_efs(inventory_file)

if __name__ == "__main__":
    main()
