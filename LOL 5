import yaml
import re
import os
import subprocess
import sys
from collections import deque

#################################
# 1) Name Normalization
#################################

def unify_name(full_name):
    """
    1) Strip domain (first '.').
    2) Lowercase.
    3) Remove trailing digits after efs/efsd/efsp/pefs/cefs.
    """
    short = full_name.split('.', 1)[0].lower()
    short = re.sub(r'(efs[dp]?|pefs|cefs)(\d+)$', r'\1', short)
    return short

def normalize_cell(cell_name):
    """
    Lowercase, strip whitespace, .m1.com -> .ml.com
    """
    cell_name = cell_name.strip().lower()
    cell_name = cell_name.replace(".m1.com", ".ml.com")
    return cell_name

#################################
# 2) EFS Data Parsing
#################################

def get_efs_server_output():
    """
    Runs efs display efsserver to get lines in format:
      server_name, domain/cell, dev/prod, group
    Then unifies server name & normalizes cell.

    Returns efs_data = { unified_server -> set_of_cells }
    """
    cmd = """efs display efsserver | sed -e '1,/^==*/d' | awk '{print $2 ", " $1 ", " $3 ", " $4}'"""
    result = subprocess.run(cmd, shell=True, capture_output=True, text=True, check=True)

    efs_data = {}
    for line in result.stdout.strip().split("\n"):
        parts = [p.strip() for p in line.split(",")]
        if len(parts) < 4:
            continue
        raw_srv, raw_cell, _, _ = parts
        srv_name = unify_name(raw_srv)
        cell_val = normalize_cell(raw_cell)

        if srv_name not in efs_data:
            efs_data[srv_name] = set()
        efs_data[srv_name].add(cell_val)

    return efs_data

#################################
# 3) BFS Over the Entire YAML to Find Hosts
#################################

def load_inventory_anywhere(inventory_file):
    """
    Reads inventory.prod.yaml and BFS-scans the entire doc for any 'hosts' keys.
    Returns inventory_data = { unified_server -> set_of_cells }.
    """
    if not os.path.isfile(inventory_file):
        print(f"‚ùå  Error: Inventory file '{inventory_file}' not found.")
        sys.exit(1)

    with open(inventory_file, 'r') as f:
        doc = yaml.safe_load(f)

    inventory_data = {}
    queue = deque([doc])

    while queue:
        node = queue.popleft()
        if isinstance(node, dict):
            # If node has 'hosts', parse them
            hosts = node.get("hosts", {})
            if isinstance(hosts, dict):
                for raw_srv, details in hosts.items():
                    if isinstance(details, dict):
                        s = unify_name(raw_srv)
                        cell_list = details.get("cells", [])
                        norm_cells = {normalize_cell(c) for c in cell_list}
                        inventory_data[s] = norm_cells

            # Enqueue sub-dicts or dicts in lists
            for v in node.values():
                if isinstance(v, dict):
                    queue.append(v)
                elif isinstance(v, list):
                    for item in v:
                        if isinstance(item, dict):
                            queue.append(item)
        elif isinstance(node, list):
            for item in node:
                if isinstance(item, dict):
                    queue.append(item)

    return inventory_data

#################################
# 4) Compare & Print in Your Screenshot Style
#################################

def compare_cells(efs_data, inv_data):
    efs_srvs = set(efs_data.keys())
    inv_srvs = set(inv_data.keys())

    missing_in_inventory = sorted(efs_srvs - inv_srvs)
    missing_in_efs       = sorted(inv_srvs - efs_srvs)

    if missing_in_inventory:
        print("\nServers found in EFS Database but not in ax_inventories:")
        print("==========================================================")
        for s in missing_in_inventory:
            print(s)

    if missing_in_efs:
        print("\nServers found in ax_inventories but not in Efs Database or efsserver.txt:")
        print("==========================================================")
        for s in missing_in_efs:
            print(s)

    common = efs_srvs & inv_srvs
    for srv in sorted(common):
        efs_cells = efs_data[srv]
        inv_cells = inv_data[srv]
        if efs_cells != inv_cells:
            missing_cells = efs_cells - inv_cells
            extra_cells   = inv_cells - efs_cells

            print(f"\nMismatch for server: {srv}")
            print(f" Efs Database: {efs_cells}")
            print(f" Ax inventory: {inv_cells}")

            if missing_cells:
                print(f" Cells in the Efs Database but not in the Ax inventory: {missing_cells}")
            if extra_cells:
                print(f" Cells in the Ax inventory but not in the Efs Database: {extra_cells}")

#################################
# 5) Main Orchestrator
#################################

def validate_inventory_with_efs(inventory_file):
    efs_data = get_efs_server_output()
    inv_data = load_inventory_anywhere(inventory_file)
    compare_cells(efs_data, inv_data)

def main():
    script_dir = os.path.dirname(os.path.abspath(__file__))
    inventory_file = os.path.join(script_dir, '..', 'prod', 'inventory.prod.yaml')
    validate_inventory_with_efs(inventory_file)

if __name__ == "__main__":
    main()
