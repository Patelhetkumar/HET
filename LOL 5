import yaml
import re
import os
import subprocess
import sys
from collections import deque

#################################
# 1) Name Normalization
#################################

def unify_name(full_name):
    """
    1) Strip domain (the first '.').
    2) Lowercase.
    3) Remove trailing digits after efs/efsd/efsp/pefs/cefs.
    e.g. lauaulcefsp899 -> lauaulcefsp
    """
    short = full_name.split('.', 1)[0].lower()
    # Example: efsd869 -> efsd, pefs99 -> pefs, cefs123 -> cefs
    short = re.sub(r'(efs[dp]?|pefs|cefs)(\d+)$', r'\1', short)
    return short

def remove_extra_spaces_in_domain(cell):
    """
    Removes weird spaces around dots:
      "p. usnj06. nyc. amrs. ml.com" -> "p.usnj06.nyc.amrs.ml.com"
    """
    # Remove spaces around dots
    cell = re.sub(r"\s*\.\s*", ".", cell)
    # Remove leftover multiple spaces
    cell = re.sub(r"\s+", "", cell)
    return cell

def normalize_cell(cell_name):
    """
    Lowercase, remove .m1.com -> .ml.com, remove spacing around dots.
    """
    cell_name = cell_name.strip().lower()
    cell_name = cell_name.replace(".m1.com", ".ml.com")
    cell_name = remove_extra_spaces_in_domain(cell_name)
    return cell_name

#################################
# 2) EFS Data Parsing
#################################

def get_efs_server_output():
    """
    Runs 'efs display efsserver', giving lines like:
      server_name, domain/cell, dev/prod, group
    We'll unify server name for matching, but also store the original name.
    
    Returns:
      efs_data       = {unified_name -> set of normalized_cells}
      efs_name_map   = {unified_name -> original_full_server_name (the first one encountered)}
    """
    cmd = """efs display efsserver | sed -e '1,/^==*/d' | awk '{print $2 ", " $1 ", " $3 ", " $4}'"""
    result = subprocess.run(cmd, shell=True, capture_output=True, text=True, check=True)

    efs_data = {}
    efs_name_map = {}  # unify_name -> original raw server name

    for line in result.stdout.strip().split("\n"):
        parts = [p.strip() for p in line.split(",")]
        if len(parts) < 4:
            continue
        raw_srv, raw_cell, _, _ = parts
        short_srv = unify_name(raw_srv)
        cell_val  = normalize_cell(raw_cell)

        # Keep the first raw server name we see for each short name
        if short_srv not in efs_name_map:
            efs_name_map[short_srv] = raw_srv

        if short_srv not in efs_data:
            efs_data[short_srv] = set()
        efs_data[short_srv].add(cell_val)

    return efs_data, efs_name_map

#################################
# 3) Load Inventory (BFS Over Entire YAML)
#################################

def load_inventory_anywhere(inventory_file):
    """
    BFS over the entire YAML doc, looking for any 'hosts:' keys.
    Returns {unified_server -> set_of_cells} plus a map for original server names if you wish.
    """
    if not os.path.isfile(inventory_file):
        print(f"‚ùå  Error: Inventory file '{inventory_file}' not found.")
        sys.exit(1)

    import yaml
    with open(inventory_file, 'r') as f:
        doc = yaml.safe_load(f)

    inv_data = {}
    queue = deque([doc])

    while queue:
        node = queue.popleft()
        if isinstance(node, dict):
            # If node has 'hosts'
            hosts = node.get("hosts", {})
            if isinstance(hosts, dict):
                for raw_srv, details in hosts.items():
                    if isinstance(details, dict):
                        short_srv = unify_name(raw_srv)
                        c_list    = details.get("cells", [])
                        norm_c    = {normalize_cell(c) for c in c_list}
                        inv_data[short_srv] = norm_c
            # BFS deeper
            for val in node.values():
                if isinstance(val, dict):
                    queue.append(val)
                elif isinstance(val, list):
                    for item in val:
                        if isinstance(item, dict):
                            queue.append(item)
        elif isinstance(node, list):
            for item in node:
                if isinstance(item, dict):
                    queue.append(item)

    return inv_data

#################################
# 4) Compare & Print with Original Names
#################################

def compare_cells(efs_data, efs_name_map, inv_data):
    """
    Compare EFS vs. Inventory, but print the original server name from efs_name_map
    (like 'lusva01efsd845.sdi.corp.bankofamerica.com') if it exists, else fall back to short name.
    """
    efs_srvs = set(efs_data.keys())
    inv_srvs = set(inv_data.keys())

    missing_in_inventory = sorted(efs_srvs - inv_srvs)
    missing_in_efs       = sorted(inv_srvs - efs_srvs)

    if missing_in_inventory:
        print("\nServers found in EFS Database but not in ax_inventories:")
        print("==========================================================")
        for short_srv in missing_in_inventory:
            raw_name = efs_name_map.get(short_srv, short_srv)
            print(raw_name)  # Print the original name from EFS

    if missing_in_efs:
        print("\nServers found in ax_inventories but not in Efs Database or efsserver.txt:")
        print("==========================================================")
        for short_srv in missing_in_efs:
            # We only have short for inventory, so just show short.
            print(short_srv)

    # Compare common servers
    common = efs_srvs & inv_srvs
    for short_srv in sorted(common):
        efs_cells = efs_data[short_srv]
        inv_cells = inv_data[short_srv]
        
        # Get the original EFS name
        raw_name = efs_name_map.get(short_srv, short_srv)

        if efs_cells != inv_cells:
            missing_cells = efs_cells - inv_cells
            extra_cells   = inv_cells - efs_cells

            print(f"\nMismatch for server: {raw_name}")
            print(f" Efs Database: {efs_cells}")
            print(f" Ax inventory: {inv_cells}")

            if missing_cells:
                print(f" Cells in the Efs Database but not in the Ax inventory: {missing_cells}")
            if extra_cells:
                print(f" Cells in the Ax inventory but not in the Efs Database: {extra_cells}")

#################################
# 5) Main Orchestrator
#################################

def validate_inventory_with_efs(inventory_file):
    efs_data, efs_name_map = get_efs_server_output()
    inv_data = load_inventory_anywhere(inventory_file)
    compare_cells(efs_data, efs_name_map, inv_data)

def main():
    script_dir = os.path.dirname(os.path.abspath(__file__))
    inventory_file = os.path.join(script_dir, '..', 'prod', 'inventory.prod.yaml')
    validate_inventory_with_efs(inventory_file)

if __name__ == "__main__":
    main()
