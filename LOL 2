import subprocess
import yaml
import re
import os

# Load inventory file path
script_dir = os.path.dirname(os.path.abspath(__file__))
inventory_file = os.path.join(script_dir, '..', 'prod', 'inventory.prod.yaml')


def get_efs_server_output():
    """Extracts real-time EFS server details using 'efs display efsserver'."""
    cmd = "efs display efsserver | awk 'NR>3 {print $2 \" \" $1 \" \" $3 \" \" $4}'"
    result = subprocess.run(cmd, shell=True, capture_output=True, text=True, check=True)

    servers = {}
    for line in result.stdout.strip().split("\n"):
        parts = line.strip().split()
        if len(parts) >= 4:  # Ensure at least: server_name, domain, type, group
            server_name = parts[0]  # E.g., luspa01efs849
            domain = parts[1]       # E.g., sdi.corp.bankofamerica.com
            host_type = parts[2]    # E.g., dev/prod
            group = parts[3]        # E.g., l_aja_ausyb01sr1
            
            servers[server_name] = {
                "domain": domain,
                "type": host_type,
                "group": group
            }

    return servers


def load_inventory():
    """Loads inventory servers and their assigned cells from inventory.prod.yaml."""
    try:
        with open(inventory_file, 'r') as file:
            inventory = yaml.safe_load(file)
    except FileNotFoundError:
        print(f"‚ùå Error: Inventory file '{inventory_file}' not found.")
        return {}

    inventory_servers = {}

    # Extract servers from inventory file
    all_groups = inventory.get('all', {}).get('children', {})
    for group, group_data in all_groups.items():
        if "hosts" not in group_data or not isinstance(group_data["hosts"], dict):
            continue  # Skip groups without hosts

        for server, details in group_data["hosts"].items():
            if not isinstance(details, dict):
                continue  # Skip malformed entries

            inventory_servers[server] = {
                "group": group,
                "cells": set(details.get("cells", [])) if "cells" in details else set()
            }

    return inventory_servers


def compare_efs_with_inventory():
    """Compares real-time EFS data against inventory.prod.yaml and shows only mismatches."""
    efs_data = get_efs_server_output()
    inventory_data = load_inventory()

    mismatches = []

    for server, efs_details in efs_data.items():
        inventory_details = inventory_data.get(server, {})

        expected_group = inventory_details.get("group", "UNKNOWN_GROUP")
        actual_group = efs_details["group"]

        expected_cells = inventory_details.get("cells", set())
        actual_cells = {f"p.{server.split('efs')[0]}.ml.com"}  # Generate expected format

        # If both groups and cells match, skip this server (no mismatch)
        if expected_group == actual_group and expected_cells == actual_cells:
            continue

        # If there's a mismatch, add it to the output
        mismatch_report = f"\nüîç Mismatch for server: {server}"
        mismatch_report += f"\n - Expected Group (Inventory): {expected_group}"
        mismatch_report += f"\n - Actual Group (EFS): {actual_group}"

        # Cell mismatches
        if expected_cells != actual_cells:
            missing_cells = expected_cells - actual_cells
            extra_cells = actual_cells - expected_cells

            mismatch_report += f"\n - Cells in Inventory but missing in EFS: {missing_cells}" if missing_cells else ""
            mismatch_report += f"\n - Cells in EFS but missing in Inventory: {extra_cells}" if extra_cells else ""

        mismatches.append(mismatch_report)

    if mismatches:
        print("\n==== üö® Mismatches Found ====")
        for mismatch in mismatches:
            print(mismatch)
    else:
        print("\n‚úÖ All servers, groups, and cells match between EFS and Inventory!")


# Run Validation
compare_efs_with_inventory()
