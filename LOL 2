import yaml
import os
import re
import sys

def load_inventory(inventory_file):
    """
    Loads the inventory file (inventory.prod.yaml) and extracts server->cells mappings.
    Returns:
        inventory_data: dict { server_name (str) -> set of cells (str) }
    """

    def extract_hosts_recursive(data, inventory_data):
        """
        Recursively traverse YAML structure to find 'hosts' and 'children',
        building inventory_data.
        """
        if not isinstance(data, dict):
            return

        # If this node has "hosts", capture them
        hosts = data.get("hosts", {})
        if isinstance(hosts, dict):
            for srv, details in hosts.items():
                if isinstance(details, dict):
                    # Normalize server name
                    normalized_srv = srv.strip().lower()
                    # Build cell set
                    cell_list = details.get("cells", [])
                    inventory_data[normalized_srv] = set(cell_list)

        # If this node has "children", recurse deeper
        children = data.get("children", {})
        if isinstance(children, dict):
            for child_key, child_val in children.items():
                extract_hosts_recursive(child_val, inventory_data)

    if not os.path.isfile(inventory_file):
        print(f"❌  Error: inventory file '{inventory_file}' not found.")
        sys.exit(1)

    with open(inventory_file, 'r') as f:
        inventory = yaml.safe_load(f)

    inventory_data = {}
    # Start at 'all' -> 'children', if present
    base = inventory.get('all', {}).get('children', {})
    extract_hosts_recursive(base, inventory_data)

    return inventory_data


def load_efs_database(efs_file):
    """
    Loads EFS Database details from a file (or you can adapt to parse stdout).
    EFS file should list lines like:
        server_name,cell_name
    Returns:
        efs_data: dict { server_name (str) -> set of cells (str) }
    """
    if not os.path.isfile(efs_file):
        print(f"❌  Error: EFS Database file '{efs_file}' not found.")
        sys.exit(1)

    efs_data = {}
    with open(efs_file, 'r') as f:
        for line in f:
            line = line.strip()
            if not line or "," not in line:
                continue
            parts = [p.strip().lower() for p in line.split(",")]
            # parts[0] = server_name, parts[1:] = possibly multiple cells
            server_name = parts[0]
            cell_names = parts[1:]
            if server_name not in efs_data:
                efs_data[server_name] = set()
            efs_data[server_name].update(cell_names)

    return efs_data


def normalize_cell(cell_name):
    """Normalize cell names to remove domain variations/spaces."""
    cell_name = cell_name.strip().lower()
    cell_name = re.sub(r"\.m1\.com$", ".ml.com", cell_name)
    return cell_name


def compare_efs_with_inventory(inventory_data, efs_data):
    """
    Compare inventory (inventory.prod.yaml) vs. EFS Database.
    Print only mismatches in a clean, structured format.
    """

    # Normalize all cell names in both datasets
    for srv in inventory_data:
        inventory_data[srv] = {normalize_cell(c) for c in inventory_data[srv]}
    for srv in efs_data:
        efs_data[srv] = {normalize_cell(c) for c in efs_data[srv]}

    # Identify missing or extra servers
    inventory_servers = set(inventory_data.keys())
    efs_servers = set(efs_data.keys())

    # Servers in EFS but not in Inventory
    missing_in_inventory = efs_servers - inventory_servers
    # Servers in Inventory but not in EFS
    missing_in_efs = inventory_servers - efs_servers

    # Print missing servers
    if missing_in_efs:
        print("\nServers found in Inventory but not in EFS Database:")
        print("==========================================================")
        for srv in sorted(missing_in_efs):
            print(srv)

    if missing_in_inventory:
        print("\nServers found in EFS Database but not in Inventory:")
        print("==========================================================")
        for srv in sorted(missing_in_inventory):
            print(srv)

    # Compare cells for servers present in both
    common_servers = inventory_servers & efs_servers

    mismatches_found = False
    for srv in sorted(common_servers):
        inv_cells = inventory_data[srv]
        efs_cells = efs_data[srv]
        if inv_cells != efs_cells:
            # We have a mismatch
            mismatches_found = True
            missing_cells = efs_cells - inv_cells
            extra_cells = inv_cells - efs_cells

            print(f"\nMismatch for server: {srv}")
            print(f" Efs Database: {efs_cells}")
            print(f" Ax inventory: {inv_cells}")
            if missing_cells:
                print(f" Cells in the Efs Database but not in the Ax inventory: {missing_cells}")
            if extra_cells:
                print(f" Cells in the Ax inventory but not in the Efs Database: {extra_cells}")

    if not mismatches_found and not missing_in_efs and not missing_in_inventory:
        print("\n✅ All servers and cells match between EFS Database and Inventory!")
    else:
        print("\n✅ Comparison complete.")


def main():
    """
    Wrapper function to unify everything. Patch/release teams only run `python script.py`
    and see the results.
    """

    # Point to your real inventory.prod.yaml location
    script_dir = os.path.dirname(os.path.abspath(__file__))
    inventory_file = os.path.join(script_dir, '..', 'prod', 'inventory.prod.yaml')

    # Example EFS Database file path
    efs_file = os.path.join(script_dir, 'efs_database.txt')  # Or wherever it is

    # 1. Load Inventory
    inventory_data = load_inventory(inventory_file)

    # 2. Load EFS Database
    efs_data = load_efs_database(efs_file)

    # 3. Compare & Print Mismatches
    compare_efs_with_inventory(inventory_data, efs_data)


if __name__ == "__main__":
    main()
