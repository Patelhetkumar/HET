import subprocess
import yaml
import os
import re
import json

# Load inventory file path
script_dir = os.path.dirname(os.path.abspath(__file__))
inventory_file = os.path.join(script_dir, '..', 'prod', 'inventory.prod.yaml')

def get_efs_server_output():
    """Extracts real-time EFS server details using 'efs display efsserver'."""
    cmd = "efs display efsserver | awk 'NR>3 {print $2 \" \" $1 \" \" $3 \" \" $4}'"
    result = subprocess.run(cmd, shell=True, capture_output=True, text=True, check=True)

    servers = {}
    for line in result.stdout.strip().split("\n"):
        parts = line.strip().split()
        if len(parts) >= 4:
            server_name = parts[0]
            domain = parts[1]
            host_type = parts[2]
            group = parts[3]
            
            servers[server_name] = {
                "domain": domain,
                "type": host_type,
                "group": group
            }

    return servers

def load_inventory():
    """Loads inventory servers, groups, and assigned cells from inventory.prod.yaml."""
    try:
        with open(inventory_file, 'r') as file:
            inventory = yaml.safe_load(file)
    except FileNotFoundError:
        print(f"‚ùå Error: Inventory file '{inventory_file}' not found.")
        return {}, {}

    inventory_servers = {}
    pattern_to_group = {}

    all_groups = inventory.get('all', {}).get('children', {})

    for group, group_data in all_groups.items():
        if not isinstance(group_data, dict):
            continue  

        if "hosts" in group_data and isinstance(group_data["hosts"], dict):
            for host in group_data["hosts"]:
                pattern = re.escape(host.split(".")[0]) + ".*"
                pattern_to_group[pattern] = group  

            for server, details in group_data["hosts"].items():
                if isinstance(details, dict):
                    inventory_servers[server] = {
                        "group": group,
                        "cells": set(details.get("cells", [])) if "cells" in details else set()
                    }

    return inventory_servers, pattern_to_group

def determine_group_from_pattern(server_name, pattern_to_group):
    """Determine the correct group dynamically based on pattern matching."""
    for pattern, group in pattern_to_group.items():
        if re.match(pattern, server_name):
            return group
    return "NO_MATCH_FOUND"

def format_output_set(cell_set):
    """Formats set output to match expected format."""
    return {cell.replace(" ", "") for cell in cell_set}

def compare_efs_with_inventory():
    """Compares real-time EFS data against inventory.prod.yaml dynamically."""
    efs_data = get_efs_server_output()
    inventory_data, pattern_to_group = load_inventory()

    mismatches = []
    outdated_servers = list(set(inventory_data.keys()) - set(efs_data.keys()))
    missing_servers = list(set(efs_data.keys()) - set(inventory_data.keys()))

    if outdated_servers:
        print("\nüö® Outdated (Decommissioned) Servers in Inventory (Not in EFS):")
        print("==========================================================")
        for server in outdated_servers:
            print(f" {server}")

    if missing_servers:
        print("\n‚ö†Ô∏è Servers in EFS but Missing in Inventory:")
        print("==========================================================")
        for server in missing_servers:
            print(f" {server}")

    for server, efs_details in efs_data.items():
        inventory_details = inventory_data.get(server, {})

        expected_group = determine_group_from_pattern(server, pattern_to_group)
        actual_group = efs_details["group"]

        expected_cells = format_output_set(inventory_details.get("cells", set()))
        actual_cells = format_output_set({f"p.{server.split('efs')[0]}.ml.com"})

        if expected_group == actual_group and expected_cells == actual_cells:
            continue

        mismatch_report = f"\nüîç Mismatch for server: {server}"
        mismatch_report += f"\n - Expected Group (AX Inventory): {expected_group}"
        mismatch_report += f"\n - Actual Group (EFS Database): {actual_group}"

        missing_cells = expected_cells - actual_cells
        extra_cells = actual_cells - expected_cells

        if expected_cells or actual_cells:
            mismatch_report += f"\n - Efs Database: {sorted(actual_cells)}"
            mismatch_report += f"\n - Ax inventory: {sorted(expected_cells)}"

        if missing_cells:
            mismatch_report += f"\n - Cells in the AX inventory but not in the EFS Database: {sorted(missing_cells)}"
        if extra_cells:
            mismatch_report += f"\n - Cells in the EFS Database but not in the AX inventory: {sorted(extra_cells)}"

        mismatches.append(mismatch_report)

    if mismatches:
        print("\n==== üö® Mismatches Found ====")
        for mismatch in mismatches:
            print(mismatch)
    else:
        print("\n‚úÖ All servers, groups, and cells match between EFS and Inventory!")

# Run Validation
compare_efs_with_inventory()
