import yaml
import re
import os
import subprocess

def get_efs_server_output():
    """Executes the command and returns parsed EFS server details directly."""
    cmd = "efs display efsserver | sed -e '1,/^ ==* /d' | awk '{print $2 \", \" $1 \", \" $3}'"
    result = subprocess.run(cmd, shell=True, capture_output=True, text=True, check=True)

    servers = {}
    for line in result.stdout.strip().split("\n"):
        parts = line.strip().split(", ")
        if len(parts) >= 3:
            server_name, cell_name, _ = parts
            servers[server_name] = set()
            servers[server_name].add(cell_name)

    return servers

def load_inventory(file_path):
    """Loads the inventory YAML and extracts all server-cell relationships dynamically."""
    with open(file_path, 'r') as file:
        inventory = yaml.safe_load(file)

    inventory_data = {}
    pattern_to_group = {}

    def extract_groups(data, parent_group=None):
        """Recursively extract server-group mappings from nested YAML structure."""
        if isinstance(data, dict):
            for key, value in data.items():
                if "hosts" in value:
                    for server, details in value["hosts"].items():
                        if isinstance(details, dict):
                            inventory_data[server] = set(details.get("cells", []))
                            pattern_to_group[server] = parent_group if parent_group else key
                if "children" in value:
                    extract_groups(value["children"], key)

    all_groups = inventory.get('all', {}).get('children', {})
    extract_groups(all_groups)

    return inventory_data, pattern_to_group

def normalize_cell(cell_name):
    """Normalize cell names by removing inconsistencies."""
    return cell_name.strip().replace(".m1.com", ".ml.com")

def determine_group_from_pattern(server_name, pattern_to_group):
    """Determine the group dynamically based on extracted inventory mappings."""
    return pattern_to_group.get(server_name, "UNKNOWN_GROUP")

def compare_cells(efsservers_data, inventory_data, pattern_to_group):
    """Compares EFS data with inventory and prints only mismatches."""
    missing_servers = list(set(efsservers_data.keys()) - set(inventory_data.keys()))
    extra_servers = list(set(inventory_data.keys()) - set(efsservers_data.keys()))

    if missing_servers:
        print("\nMissing servers in inventory:")
        print("==========================================================")
        for server in missing_servers:
            print(f" {server}")

    if extra_servers:
        print("\nServers found in Ax Inventory but not in EFS Database:")
        print("==========================================================")
        for server in extra_servers:
            print(f" {server}")

    for server, expected_cells in efsservers_data.items():
        group = determine_group_from_pattern(server, pattern_to_group)
        actual_cells = {normalize_cell(c) for c in inventory_data.get(server, set())}
        expected_cells = {normalize_cell(c) for c in expected_cells}

        if expected_cells != actual_cells:
            missing_cells = expected_cells - actual_cells
            extra_cells = actual_cells - expected_cells

            print(f"\nMismatch for server: {server} in group {group}:")
            print(f" Efs Database: {expected_cells}")
            print(f" Ax inventory: {actual_cells}")

            if missing_cells:
                print(f" Cells in the Efs Database but not in the Ax inventory: {missing_cells}")
            if extra_cells:
                print(f" Cells in the Ax inventory but not in the Efs Database: {extra_cells}")

def validate_inventory_with_efs(inventory_file):
    """Wrapper function to parse files and compare inventory with EFS dynamically."""
    efsservers_data = get_efs_server_output()
    inventory_data, pattern_to_group = load_inventory(inventory_file)
    compare_cells(efsservers_data, inventory_data, pattern_to_group)

# Load YAML file path dynamically
script_dir = os.path.dirname(os.path.abspath(__file__))
inventory_file = os.path.join(script_dir, '..', 'prod', 'inventory.prod.yaml')

# Call the validation function
validate_inventory_with_efs(inventory_file)
