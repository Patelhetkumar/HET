import yaml
import re
import os
import subprocess
import sys

#####################################
# 1) Unify & Normalize Names
#####################################

def unify_name(full_name):
    """
    1) Strip everything after the first '.' to remove domain (e.g. .apac.sdi.corp...).
    2) Convert to lowercase.
    3) Remove trailing digits after efs|efsd|efsp if needed (e.g. efsd869 -> efsd).
    """
    short = full_name.split('.', 1)[0].lower()
    # Remove trailing digits after efs[d|p]?
    short = re.sub(r'(efs[dp]?)(\d+)$', r'\1', short)
    return short

def normalize_cell(cell_name):
    """Lowercase, trim, and replace .m1.com -> .ml.com."""
    cell_name = cell_name.strip().lower()
    cell_name = cell_name.replace(".m1.com", ".ml.com")
    return cell_name

#####################################
# 2) EFS Data Parsing
#####################################

def get_efs_server_output():
    """
    Runs 'efs display efsserver' to produce lines like:
      server, domain/cell, dev/prod, group
    Example line:
      lauaulcefsp899.apac.sdi.corp..., d.auau2p.syd.aja.ml.com, prod, lauaulcefsp899...
    We'll store:
      efs_data = {unified_server_name: {normalized_cell1, cell2, ...}}
    """
    cmd = """efs display efsserver | sed -e '1,/^==*/d' | awk '{print $2 ", " $1 ", " $3 ", " $4}'"""
    result = subprocess.run(cmd, shell=True, capture_output=True, text=True, check=True)

    efs_data = {}
    for line in result.stdout.strip().split("\n"):
        parts = [p.strip() for p in line.split(",")]
        if len(parts) < 4:
            # Skip malformed lines
            continue

        raw_server_name = parts[0]  # e.g. lauaulcefsp899.apac...
        raw_cell_name   = parts[1]  # e.g. d.auau2p.syd.aja.ml.com
        # parts[2] = dev/prod, parts[3] = group (unused here)

        server_name = unify_name(raw_server_name)
        cell_name   = normalize_cell(raw_cell_name)

        if server_name not in efs_data:
            efs_data[server_name] = set()
        efs_data[server_name].add(cell_name)

    return efs_data

#####################################
# 3) Inventory Parsing
#####################################

def load_inventory(inventory_file):
    """
    Loads 'inventory.prod.yaml' to produce:
      inventory_data = {unified_server_name: {normalized_cell1, cell2}}
    Recursively processes 'children' -> 'hosts' blocks.
    """
    if not os.path.isfile(inventory_file):
        print(f"❌  Error: inventory file '{inventory_file}' not found.")
        sys.exit(1)

    with open(inventory_file, 'r') as f:
        inventory = yaml.safe_load(f)

    inventory_data = {}

    def recurse_groups(node):
        if not isinstance(node, dict):
            return

        # If node has "hosts", parse them
        hosts = node.get("hosts", {})
        if isinstance(hosts, dict):
            for raw_srv, details in hosts.items():
                if isinstance(details, dict):
                    srv_name = unify_name(raw_srv)
                    cell_list = details.get("cells", [])
                    norm_cells = {normalize_cell(c) for c in cell_list}
                    inventory_data[srv_name] = norm_cells

        # If node has "children", recurse deeper
        children = node.get("children", {})
        if isinstance(children, dict):
            for _, child_block in children.items():
                recurse_groups(child_block)

    # Start from 'all' -> 'children'
    base = inventory.get('all', {}).get('children', {})
    recurse_groups(base)

    return inventory_data

#####################################
# 4) The EXACT compare_cells function
#####################################

def compare_cells(efsservers_data, inventory_data):
    """
    Compare EFS (efsservers_data) vs. Inventory (inventory_data) in your style:

      - missing_servers = list( EFS - Inventory )
      - extra_servers   = list( Inventory - EFS )
      - For each server in EFS, compare expected vs. actual cells.
    """

    # 1) Missing in inventory
    missing_servers = list(set(efsservers_data.keys()) - set(inventory_data.keys()))
    # 2) Extra (in inventory but not in EFS)
    extra_servers   = list(set(inventory_data.keys()) - set(efsservers_data.keys()))

    # Print missing
    if missing_servers:
        print("\nMissing servers in inventory:")
        print("==========================================================")
        for server in missing_servers:
            print(f" {server}")

    # Print extra
    if extra_servers:
        print("\nServers found in ax_inventories but not in Efs Database or efsserver.txt:")
        print("==========================================================")
        for server in extra_servers:
            print(f" {server}")

    # For each server in EFS data
    for server, expected_cells in efsservers_data.items():
        # Not using a typed dictionary, so group = "No Group" or skip entirely
        group = "No Group"

        # actual cells from inventory
        actual_cells = inventory_data.get(server, set())

        if not actual_cells:
            # Means EFS has a server, but inventory is missing or has zero cells
            print(f"\nMismatch for server: {server} in group {group}:")
            print(f" Efs Database: {expected_cells}")
            print(f" Ax inventory: (New Server)")
        elif expected_cells != actual_cells:
            missing_cells = expected_cells - actual_cells
            extra_cells   = actual_cells - expected_cells

            print(f"\n{server} in group {group}:")
            print(f" Efs Database: {expected_cells}")
            print(f" Ax inventory: {actual_cells}")

            if missing_cells:
                print(f" Cells in the Efs Database but not in the Ax inventory: {missing_cells}")
            if extra_cells:
                print(f" Cells in the Ax inventory but not in the Efs Database: {extra_cells}")

#####################################
# 5) Wrapper
#####################################

def validate_inventory_with_efs(inventory_file):
    """Parses EFS data & inventory, then calls compare_cells."""
    efsservers_data = get_efs_server_output()
    inventory_data  = load_inventory(inventory_file)
    compare_cells(efsservers_data, inventory_data)

def main():
    script_dir = os.path.dirname(os.path.abspath(__file__))
    inventory_file = os.path.join(script_dir, '..', 'prod', 'inventory.prod.yaml')
    validate_inventory_with_efs(inventory_file)

if __name__ == "__main__":
    main()
